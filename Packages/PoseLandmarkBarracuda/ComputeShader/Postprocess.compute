#pragma kernel Postprocess

#include "Common.cginc"

// Input
uint _keypointCount;
StructuredBuffer<float> _poseFlag;
StructuredBuffer<float> _Landmark;
StructuredBuffer<float> _LandmarkWorld;

// Output
RWStructuredBuffer<float4> _Output;
RWStructuredBuffer<float4> _OutputWorld;

float Sigmoid(float x){
    return 1.0 / (1.0 + exp(-x));
}

[numthreads(33 + 1, 1, 1)]
void Postprocess(uint id : SV_DispatchThreadID)
{   
    if(id > _keypointCount) return;

    if(id == _keypointCount){
        float isPoseExist = _poseFlag[0];
        _Output[id] = float4(isPoseExist, 0, 0, 0);
        _OutputWorld[id] = float4(isPoseExist, 0, 0, 0);
    }
    else{
        float x = _Landmark[id * 5] / IMAGE_SIZE;
        float y = 1.0 - _Landmark[id * 5 + 1] / IMAGE_SIZE;
        float z = _Landmark[id * 5 + 2] / IMAGE_SIZE;
        float visibility = _Landmark[id * 5 + 3];
        float presence = _Landmark[id * 5 + 4];

        float score = Sigmoid(min(visibility, presence));
        _Output[id] = float4(x, y, z, score);
        _OutputWorld[id] = float4(_LandmarkWorld[id * 3], -_LandmarkWorld[id * 3 + 1], _LandmarkWorld[id * 3 + 2], score);
    }
}

